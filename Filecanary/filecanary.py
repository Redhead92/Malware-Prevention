#!/usr/bin/env python3

##Step 1: import necessary libraries
#import OS methods for file statistics
import os
from os import stat

#necessary (google) e-mail modules
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import Flow, InstalledAppFlow
from googleapiclient.discovery import build
from email.message import EmailMessage

#import base64 for email encoding
import base64

# sleep module for waiting.
from time import sleep

##Global Variables##
#E-mail setup
to_mail_addr = "redheadmalwaretest@gmail.com"
from_mail_addr = "redheadmalwaretest@gmail.com"
subject = "CANARY TRIGGERED"
message_content = "WARNING, your file canary has triggered" 

#Canary setup
filename = "chrp.txt"

##Step 2: setup e-mail message function for e-mail to be sent once canary triggered 
# create Google service to access gmail safely
def EmailSend():
##Authentication
#define required variables for Google service
	CLIENT_SECRET_FILE = 'nothingtosee.json'
	API_SERVICE_NAME = 'gmail'
	API_VERSION = 'v1'
	SCOPES = ['https://mail.google.com/']
	creds = None

# check if token exists and if so use as credential 
	#Un-hide token
	os.system("attrib -h " + "token.json")	
	if os.path.exists('token.json'):
		with open('token.json', 'rb') as token:
			creds = Credentials.from_authorized_user_file('token.json', SCOPES)

# If there are no (valid) credentials available, let the user log in.
	if not creds or not creds.valid:
		if creds and creds.expired and creds.refresh_token:
			creds.refresh(Request())
		else:
			flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET_FILE, SCOPES)
			creds = flow.run_local_server()
		# Save the credentials for the next run
		with open('token.json', 'w') as token:
			token.write(creds.to_json())
		#hide token
		os.system("attrib +h " + "token.json")			
	service = build(API_SERVICE_NAME,API_VERSION, credentials=creds)
	
	#Remove any remaining client secret file (for safety)	
	if os.path.exists(CLIENT_SECRET_FILE):
		os.remove(CLIENT_SECRET_FILE)
## End of authentication
 
	message = EmailMessage()
	message.set_content(message_content)
	message['To'] = to_mail_addr	
	message['From'] = from_mail_addr
	message['Subject'] = subject

	#encode the message to make it url safe
	encoded_message = base64.urlsafe_b64encode(message.as_bytes()).decode()

	#incorporate the encoded message in the 'raw' element of the gmail 
	raw_message = {
		'raw' : encoded_message
	}

	#send the message
	send_message = (service.users().messages().send(userId="me", body=raw_message).execute())

##Step 3: Canary watch function
def chirpchirp(filename):
	intial_access_time = stat(filename).st_atime
	sleep(3)

	while True:
		try:
			file_access_time = stat(filename).st_atime
		except FileNotFoundError:
			EmailSend()
			break
		if file_access_time != intial_access_time:
			EmailSend()
			break
	return

def main():
	chirpchirp(filename)
	#delete any authentication token present just to be safe
	#os.remove('token.json')

if __name__ == "__main__":
	main()